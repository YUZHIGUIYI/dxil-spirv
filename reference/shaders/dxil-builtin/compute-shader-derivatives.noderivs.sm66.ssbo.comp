#version 460
#extension GL_KHR_shader_subgroup_quad : require
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) coherent buffer SSBO
{
    uint _m0[];
} _22;

layout(set = 0, binding = 0) uniform texture2D _8;
layout(set = 0, binding = 1) uniform texture2DArray _11;
layout(set = 0, binding = 2) uniform textureCube _14;
layout(set = 0, binding = 3) uniform texture3D _17;
layout(set = 0, binding = 0) uniform sampler _25;

void main()
{
    float _33 = float(gl_GlobalInvocationID.x);
    float _34 = _33 * 0.100000001490116119384765625;
    float _36 = _33 * 0.20000000298023223876953125;
    float _38 = _33 * 0.300000011920928955078125;
    float _40 = _33 * 0.4000000059604644775390625;
    vec2 _49 = vec2(_34, _36);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler2D(_8, _25), vec2(_34, _36), _49 - subgroupQuadSwapHorizontal(_49), _49 - subgroupQuadSwapVertical(_49)).x);
    vec2 _70 = vec2(_34, _36);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler2DArray(_11, _25), vec3(_34, _36, _38), _70 - subgroupQuadSwapHorizontal(_70), _70 - subgroupQuadSwapVertical(_70)).x);
    vec3 _89 = vec3(_34, _36, _38);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(samplerCube(_14, _25), vec3(_34, _36, _38), _89 - subgroupQuadSwapHorizontal(_89), _89 - subgroupQuadSwapVertical(_89)).x);
    vec3 _107 = vec3(_34, _36, _38);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler3D(_17, _25), vec3(_34, _36, _38), _107 - subgroupQuadSwapHorizontal(_107), _107 - subgroupQuadSwapVertical(_107)).x);
    groupMemoryBarrier();
    barrier();
    vec2 _126 = vec2(_34, _36);
    float _132 = exp2(_40);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler2D(_8, _25), vec2(_34, _36), (_126 - subgroupQuadSwapHorizontal(_126)) * _132, (_126 - subgroupQuadSwapVertical(_126)) * _132).x);
    vec2 _147 = vec2(_34, _36);
    float _152 = exp2(_40);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler2DArray(_11, _25), vec3(_34, _36, _38), (_147 - subgroupQuadSwapHorizontal(_147)) * _152, (_147 - subgroupQuadSwapVertical(_147)) * _152).x);
    vec3 _167 = vec3(_34, _36, _38);
    float _172 = exp2(_40);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(samplerCube(_14, _25), vec3(_34, _36, _38), (_167 - subgroupQuadSwapHorizontal(_167)) * _172, (_167 - subgroupQuadSwapVertical(_167)) * _172).x);
    vec3 _187 = vec3(_34, _36, _38);
    float _192 = exp2(_40);
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + textureGrad(sampler3D(_17, _25), vec3(_34, _36, _38), (_187 - subgroupQuadSwapHorizontal(_187)) * _192, (_187 - subgroupQuadSwapVertical(_187)) * _192).x);
    groupMemoryBarrier();
    barrier();
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadBroadcast(_40, 1u) - subgroupQuadBroadcast(_40, 0u)));
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadBroadcast(_40, 2u) - subgroupQuadBroadcast(_40, 0u)));
    groupMemoryBarrier();
    barrier();
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadBroadcast(_40, 1u) - subgroupQuadBroadcast(_40, 0u)));
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadBroadcast(_40, 2u) - subgroupQuadBroadcast(_40, 0u)));
    groupMemoryBarrier();
    barrier();
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadSwapHorizontal(_40) - subgroupQuadSwapHorizontal(_40)));
    _22._m0[gl_GlobalInvocationID.x] = floatBitsToUint(uintBitsToFloat(_22._m0[gl_GlobalInvocationID.x]) + (subgroupQuadSwapVertical(_40) - subgroupQuadSwapHorizontal(_40)));
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 260
; Schema: 0
OpCapability Shader
OpCapability GroupNonUniformQuad
%131 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %28
OpExecutionMode %3 LocalSize 64 1 1
OpName %3 "main"
OpName %20 "SSBO"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %11 DescriptorSet 0
OpDecorate %11 Binding 1
OpDecorate %14 DescriptorSet 0
OpDecorate %14 Binding 2
OpDecorate %17 DescriptorSet 0
OpDecorate %17 Binding 3
OpDecorate %19 ArrayStride 4
OpMemberDecorate %20 0 Offset 0
OpDecorate %20 Block
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 0
OpDecorate %22 Coherent
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %28 BuiltIn GlobalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeFloat 32
%6 = OpTypeImage %5 2D 0 0 0 1 Unknown
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpTypeImage %5 2D 0 1 0 1 Unknown
%10 = OpTypePointer UniformConstant %9
%11 = OpVariable %10 UniformConstant
%12 = OpTypeImage %5 Cube 0 0 0 1 Unknown
%13 = OpTypePointer UniformConstant %12
%14 = OpVariable %13 UniformConstant
%15 = OpTypeImage %5 3D 0 0 0 1 Unknown
%16 = OpTypePointer UniformConstant %15
%17 = OpVariable %16 UniformConstant
%18 = OpTypeInt 32 0
%19 = OpTypeRuntimeArray %18
%20 = OpTypeStruct %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypeSampler
%24 = OpTypePointer UniformConstant %23
%25 = OpVariable %24 UniformConstant
%26 = OpTypeVector %18 3
%27 = OpTypePointer Input %26
%28 = OpVariable %27 Input
%29 = OpTypePointer Input %18
%31 = OpConstant %18 0
%35 = OpConstant %5 0.100000001
%37 = OpConstant %5 0.200000003
%39 = OpConstant %5 0.300000012
%41 = OpConstant %5 0.400000006
%44 = OpTypeSampledImage %6
%46 = OpConstant %5 0
%47 = OpTypeVector %5 4
%48 = OpTypeVector %5 2
%51 = OpConstant %18 3
%53 = OpConstant %18 1
%59 = OpTypePointer StorageBuffer %18
%68 = OpTypeSampledImage %9
%76 = OpTypeVector %5 3
%87 = OpTypeSampledImage %12
%105 = OpTypeSampledImage %15
%121 = OpConstant %18 2
%122 = OpConstant %18 2120
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %258
%258 = OpLabel
%30 = OpAccessChain %29 %28 %31
%32 = OpLoad %18 %30
%33 = OpConvertUToF %5 %32
%34 = OpFMul %5 %33 %35
%36 = OpFMul %5 %33 %37
%38 = OpFMul %5 %33 %39
%40 = OpFMul %5 %33 %41
%42 = OpLoad %6 %8
%43 = OpLoad %23 %25
%45 = OpSampledImage %44 %42 %43
%49 = OpCompositeConstruct %48 %34 %36
%50 = OpGroupNonUniformQuadSwap %48 %51 %49 %31
%52 = OpGroupNonUniformQuadSwap %48 %51 %49 %53
%54 = OpFSub %48 %49 %50
%55 = OpFSub %48 %49 %52
%57 = OpCompositeConstruct %48 %34 %36
%56 = OpImageSampleExplicitLod %47 %45 %57 Grad %54 %55
%58 = OpCompositeExtract %5 %56 0
%60 = OpAccessChain %59 %22 %31 %32
%61 = OpLoad %18 %60
%62 = OpBitcast %5 %61
%63 = OpFAdd %5 %62 %58
%64 = OpBitcast %18 %63
%65 = OpAccessChain %59 %22 %31 %32
OpStore %65 %64
%66 = OpLoad %9 %11
%67 = OpLoad %23 %25
%69 = OpSampledImage %68 %66 %67
%70 = OpCompositeConstruct %48 %34 %36
%71 = OpGroupNonUniformQuadSwap %48 %51 %70 %31
%72 = OpGroupNonUniformQuadSwap %48 %51 %70 %53
%73 = OpFSub %48 %70 %71
%74 = OpFSub %48 %70 %72
%77 = OpCompositeConstruct %76 %34 %36 %38
%75 = OpImageSampleExplicitLod %47 %69 %77 Grad %73 %74
%78 = OpCompositeExtract %5 %75 0
%79 = OpAccessChain %59 %22 %31 %32
%80 = OpLoad %18 %79
%81 = OpBitcast %5 %80
%82 = OpFAdd %5 %81 %78
%83 = OpBitcast %18 %82
%84 = OpAccessChain %59 %22 %31 %32
OpStore %84 %83
%85 = OpLoad %12 %14
%86 = OpLoad %23 %25
%88 = OpSampledImage %87 %85 %86
%89 = OpCompositeConstruct %76 %34 %36 %38
%90 = OpGroupNonUniformQuadSwap %76 %51 %89 %31
%91 = OpGroupNonUniformQuadSwap %76 %51 %89 %53
%92 = OpFSub %76 %89 %90
%93 = OpFSub %76 %89 %91
%95 = OpCompositeConstruct %76 %34 %36 %38
%94 = OpImageSampleExplicitLod %47 %88 %95 Grad %92 %93
%96 = OpCompositeExtract %5 %94 0
%97 = OpAccessChain %59 %22 %31 %32
%98 = OpLoad %18 %97
%99 = OpBitcast %5 %98
%100 = OpFAdd %5 %99 %96
%101 = OpBitcast %18 %100
%102 = OpAccessChain %59 %22 %31 %32
OpStore %102 %101
%103 = OpLoad %15 %17
%104 = OpLoad %23 %25
%106 = OpSampledImage %105 %103 %104
%107 = OpCompositeConstruct %76 %34 %36 %38
%108 = OpGroupNonUniformQuadSwap %76 %51 %107 %31
%109 = OpGroupNonUniformQuadSwap %76 %51 %107 %53
%110 = OpFSub %76 %107 %108
%111 = OpFSub %76 %107 %109
%113 = OpCompositeConstruct %76 %34 %36 %38
%112 = OpImageSampleExplicitLod %47 %106 %113 Grad %110 %111
%114 = OpCompositeExtract %5 %112 0
%115 = OpAccessChain %59 %22 %31 %32
%116 = OpLoad %18 %115
%117 = OpBitcast %5 %116
%118 = OpFAdd %5 %117 %114
%119 = OpBitcast %18 %118
%120 = OpAccessChain %59 %22 %31 %32
OpStore %120 %119
OpControlBarrier %121 %121 %122
%123 = OpLoad %6 %8
%124 = OpLoad %23 %25
%125 = OpSampledImage %44 %123 %124
%126 = OpCompositeConstruct %48 %34 %36
%127 = OpGroupNonUniformQuadSwap %48 %51 %126 %31
%128 = OpGroupNonUniformQuadSwap %48 %51 %126 %53
%129 = OpFSub %48 %126 %127
%130 = OpFSub %48 %126 %128
%132 = OpExtInst %5 %131 Exp2 %40
%133 = OpVectorTimesScalar %48 %129 %132
%134 = OpVectorTimesScalar %48 %130 %132
%136 = OpCompositeConstruct %48 %34 %36
%135 = OpImageSampleExplicitLod %47 %125 %136 Grad %133 %134
%137 = OpCompositeExtract %5 %135 0
%138 = OpAccessChain %59 %22 %31 %32
%139 = OpLoad %18 %138
%140 = OpBitcast %5 %139
%141 = OpFAdd %5 %140 %137
%142 = OpBitcast %18 %141
%143 = OpAccessChain %59 %22 %31 %32
OpStore %143 %142
%144 = OpLoad %9 %11
%145 = OpLoad %23 %25
%146 = OpSampledImage %68 %144 %145
%147 = OpCompositeConstruct %48 %34 %36
%148 = OpGroupNonUniformQuadSwap %48 %51 %147 %31
%149 = OpGroupNonUniformQuadSwap %48 %51 %147 %53
%150 = OpFSub %48 %147 %148
%151 = OpFSub %48 %147 %149
%152 = OpExtInst %5 %131 Exp2 %40
%153 = OpVectorTimesScalar %48 %150 %152
%154 = OpVectorTimesScalar %48 %151 %152
%156 = OpCompositeConstruct %76 %34 %36 %38
%155 = OpImageSampleExplicitLod %47 %146 %156 Grad %153 %154
%157 = OpCompositeExtract %5 %155 0
%158 = OpAccessChain %59 %22 %31 %32
%159 = OpLoad %18 %158
%160 = OpBitcast %5 %159
%161 = OpFAdd %5 %160 %157
%162 = OpBitcast %18 %161
%163 = OpAccessChain %59 %22 %31 %32
OpStore %163 %162
%164 = OpLoad %12 %14
%165 = OpLoad %23 %25
%166 = OpSampledImage %87 %164 %165
%167 = OpCompositeConstruct %76 %34 %36 %38
%168 = OpGroupNonUniformQuadSwap %76 %51 %167 %31
%169 = OpGroupNonUniformQuadSwap %76 %51 %167 %53
%170 = OpFSub %76 %167 %168
%171 = OpFSub %76 %167 %169
%172 = OpExtInst %5 %131 Exp2 %40
%173 = OpVectorTimesScalar %76 %170 %172
%174 = OpVectorTimesScalar %76 %171 %172
%176 = OpCompositeConstruct %76 %34 %36 %38
%175 = OpImageSampleExplicitLod %47 %166 %176 Grad %173 %174
%177 = OpCompositeExtract %5 %175 0
%178 = OpAccessChain %59 %22 %31 %32
%179 = OpLoad %18 %178
%180 = OpBitcast %5 %179
%181 = OpFAdd %5 %180 %177
%182 = OpBitcast %18 %181
%183 = OpAccessChain %59 %22 %31 %32
OpStore %183 %182
%184 = OpLoad %15 %17
%185 = OpLoad %23 %25
%186 = OpSampledImage %105 %184 %185
%187 = OpCompositeConstruct %76 %34 %36 %38
%188 = OpGroupNonUniformQuadSwap %76 %51 %187 %31
%189 = OpGroupNonUniformQuadSwap %76 %51 %187 %53
%190 = OpFSub %76 %187 %188
%191 = OpFSub %76 %187 %189
%192 = OpExtInst %5 %131 Exp2 %40
%193 = OpVectorTimesScalar %76 %190 %192
%194 = OpVectorTimesScalar %76 %191 %192
%196 = OpCompositeConstruct %76 %34 %36 %38
%195 = OpImageSampleExplicitLod %47 %186 %196 Grad %193 %194
%197 = OpCompositeExtract %5 %195 0
%198 = OpAccessChain %59 %22 %31 %32
%199 = OpLoad %18 %198
%200 = OpBitcast %5 %199
%201 = OpFAdd %5 %200 %197
%202 = OpBitcast %18 %201
%203 = OpAccessChain %59 %22 %31 %32
OpStore %203 %202
OpControlBarrier %121 %121 %122
%204 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %31
%205 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %53
%206 = OpFSub %5 %205 %204
%207 = OpAccessChain %59 %22 %31 %32
%208 = OpLoad %18 %207
%209 = OpBitcast %5 %208
%210 = OpFAdd %5 %209 %206
%211 = OpBitcast %18 %210
%212 = OpAccessChain %59 %22 %31 %32
OpStore %212 %211
%213 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %31
%214 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %121
%215 = OpFSub %5 %214 %213
%216 = OpAccessChain %59 %22 %31 %32
%217 = OpLoad %18 %216
%218 = OpBitcast %5 %217
%219 = OpFAdd %5 %218 %215
%220 = OpBitcast %18 %219
%221 = OpAccessChain %59 %22 %31 %32
OpStore %221 %220
OpControlBarrier %121 %121 %122
%222 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %31
%223 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %53
%224 = OpFSub %5 %223 %222
%225 = OpAccessChain %59 %22 %31 %32
%226 = OpLoad %18 %225
%227 = OpBitcast %5 %226
%228 = OpFAdd %5 %227 %224
%229 = OpBitcast %18 %228
%230 = OpAccessChain %59 %22 %31 %32
OpStore %230 %229
%231 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %31
%232 = OpGroupNonUniformQuadBroadcast %5 %51 %40 %121
%233 = OpFSub %5 %232 %231
%234 = OpAccessChain %59 %22 %31 %32
%235 = OpLoad %18 %234
%236 = OpBitcast %5 %235
%237 = OpFAdd %5 %236 %233
%238 = OpBitcast %18 %237
%239 = OpAccessChain %59 %22 %31 %32
OpStore %239 %238
OpControlBarrier %121 %121 %122
%240 = OpGroupNonUniformQuadSwap %5 %51 %40 %31
%241 = OpGroupNonUniformQuadSwap %5 %51 %40 %31
%242 = OpFSub %5 %241 %240
%243 = OpAccessChain %59 %22 %31 %32
%244 = OpLoad %18 %243
%245 = OpBitcast %5 %244
%246 = OpFAdd %5 %245 %242
%247 = OpBitcast %18 %246
%248 = OpAccessChain %59 %22 %31 %32
OpStore %248 %247
%249 = OpGroupNonUniformQuadSwap %5 %51 %40 %31
%250 = OpGroupNonUniformQuadSwap %5 %51 %40 %53
%251 = OpFSub %5 %250 %249
%252 = OpAccessChain %59 %22 %31 %32
%253 = OpLoad %18 %252
%254 = OpBitcast %5 %253
%255 = OpFAdd %5 %254 %251
%256 = OpBitcast %18 %255
%257 = OpAccessChain %59 %22 %31 %32
OpStore %257 %256
OpReturn
OpFunctionEnd
#endif
